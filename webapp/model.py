from orm import Whorl, Session, WhorlIdentity, Identity
from hashlib import sha512
from sqlalchemy.orm.exc import NoResultFound
from sqlalchemy.sql.expression import asc
from operator import mul
from collections import defaultdict
from bigbrother.webapp.db import Stat

def build_raw_data(partial, environ, ip):

    rawdata = dict(partial)

    httpheaders = {}
    for key, value in environ.items():
        if key.startswith("HTTP_"):
            httpheaders[key] = value
    rawdata.update(httpheaders)
    rawdata["IP_ADDR"] = ip

    return rawdata


def get_whorls(rawdata):

    db = Session()
    whorls = []
    hashes = [hashed for key, value, hashed in create_hashes(rawdata)]
    whorls = db.query(Whorl).\
        filter(Whorl.hashed.in_(hashes)).\
        all()

    #TODO: if the number of users grows large, we need to limit
    # the whorls we consider, because otherwise the set of users we need
    # to consider gets too large, and the memory and computing requirements
    # will grow too quickly. So we could do something like this:
    #
    #order_by(asc(Whorl.count)).\
    #limit(top)
    #
    # this only looks at rare whorls. This may not be the best solution. When the data
    # is sparse, if a player switches browsers there is very little or no overlap with
    # the whorls generated by the previous browser with this method.

    return whorls



def create_get_whorls(rawdata):
        
    whorls = []
    db = Session()

    for key, value, hashed in create_hashes(rawdata):
        try:
            whorl = db.query(Whorl).filter_by(hashed=hashed).one()

        except NoResultFound:
            whorl = Whorl(hashed=hashed, key=key, value=value)
            db.add(whorl)
            db.flush()
            
        whorls.append(whorl)

    return whorls


def create_hashes(whorls, prefix=None):
    
    hashes = []

    for key, value in whorls.items():

        key = str(key) #these are always strings at the moment, but just in case.
        if prefix:
            key = prefix + ":" + key
            
        if type(value) == dict:
            hashes.extend(create_hashes(value, prefix=key))            
            
        elif type(value) == list:
            for item in value:
                hashes.extend(create_hashes(item, prefix=key))
                
        else:
            
            if type(value) != unicode:
                value = unicode(value)
                
            hashes.append((key,
                            value,
                            sha512((key + value).encode("utf-8")).hexdigest()))
            
    return hashes


def get_whorl_identities(whorls, identity):

    db = Session()

    wis = []
    for whorl in whorls:
        try:
            wi = db.query(WhorlIdentity).\
                filter_by(whorl_hashed=whorl.hashed).\
                filter_by(identity_id=identity.id).\
                one()
            
        except NoResultFound:
            wi = WhorlIdentity(whorl_hashed=whorl.hashed,
                                identity_id = identity.id)
            db.add(wi)
            db.flush()
        wis.append(wi)

    return wis


def learn(whorls, identity):
    
    """
    increment the count for whorlID probability, whorl, total_visits
    and identity.
    """

    identity.count = identity.count + 1
    query = Stat.all()
    query.filter("name =", "total_visits")
    total_visits = query.fetch(1)[0]
    total_visits.value = total_visits.value + 1
    
    for whorl in whorls:
        whorl.count = whorl.count + 1

    for wi in get_whorl_identities(whorls, identity):
        wi.count = wi.count + 1

    total_visits.put()
    db.commit()
        

def create_identity(name):
    db = Session()
    identity = Identity(name=name)
    db.add(identity)
    db.flush()
    return identity


def stats_obj(db):
    return dict([(s.key, s.value) for s in db.query(Stat).all()])

                
def identify_from(whorls):

    db = Session()
    stats = stats_obj(db)
    minprob = float(1) / stats["total_visits"]
    whorl_hashes = list(set([whorl.hashed for whorl in whorls]))

    # this is a dictionary of dictionaries. The inner dictionaries
    # contain probabilities of the whorl given the user.
    whorlids = defaultdict(lambda : defaultdict(lambda : minprob))
    for wid in db.query(WhorlIdentity).\
        filter(WhorlIdentity.whorl_hashed.in_(whorl_hashes)).\
        all():

        whorlids[wid.identity][wid.whorl_hashed] =\
            min(1, float(wid.count) / wid.identity.count)

    # The probabilities above are then used to create a list
    # of probabilities per user for every whorl passed in.
    # The inner dictionary above defaults to a reasonable
    # minimum if we've never seen a whorl for a given user
    givenid = defaultdict(list)
    for identity, idprobs in whorlids.items():
        for whorl in whorls:
            givenid[identity].append(idprobs[whorl.hashed])

    # These are all the probabilities put into a list of tuples so
    # it can be sorted by probability.
    probs = [(\
               # calculate the posterior probability p(whorl|identity)p(identity)
               reduce(mul, idprobs) * (float(identity.count) / stats["total_visits"]),\

               # identity id as a tie breaker in sorting. this is arbitrary. If there
               # is a tie, we just guess. could put a random number here I suppose.
               identity.id,\

               # the identity tied to this probability.
               identity) \
               
               for identity, idprobs in givenid.items()]

    probs.sort()
    return probs[-1][2] # the most likely identity (third element is the identity)

